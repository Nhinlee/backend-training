// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: habits.sql

package db

import (
	"context"
	"database/sql"
)

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (
    user_id,
    skill_id,
    title,
    max_consecutive_days
) VALUES (
    $1, $2, $3, $4
) RETURNING habit_id, title, max_consecutive_days, skill_id, user_id
`

type CreateHabitParams struct {
	UserID             int64         `json:"user_id"`
	SkillID            sql.NullInt64 `json:"skill_id"`
	Title              string        `json:"title"`
	MaxConsecutiveDays int32         `json:"max_consecutive_days"`
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, createHabit,
		arg.UserID,
		arg.SkillID,
		arg.Title,
		arg.MaxConsecutiveDays,
	)
	var i Habit
	err := row.Scan(
		&i.HabitID,
		&i.Title,
		&i.MaxConsecutiveDays,
		&i.SkillID,
		&i.UserID,
	)
	return i, err
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits WHERE habit_id = $1
`

func (q *Queries) DeleteHabit(ctx context.Context, habitID int64) error {
	_, err := q.db.ExecContext(ctx, deleteHabit, habitID)
	return err
}

const getHabitsByUser = `-- name: GetHabitsByUser :many
SELECT habit_id, title, max_consecutive_days, skill_id, user_id FROM habits
WHERE user_id = $1
`

func (q *Queries) GetHabitsByUser(ctx context.Context, userID int64) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, getHabitsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.HabitID,
			&i.Title,
			&i.MaxConsecutiveDays,
			&i.SkillID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitsByUserAndSkill = `-- name: GetHabitsByUserAndSkill :many
SELECT habit_id, title, max_consecutive_days, skill_id, user_id FROM habits
WHERE user_id = $1 AND skill_id = $2
`

type GetHabitsByUserAndSkillParams struct {
	UserID  int64         `json:"user_id"`
	SkillID sql.NullInt64 `json:"skill_id"`
}

func (q *Queries) GetHabitsByUserAndSkill(ctx context.Context, arg GetHabitsByUserAndSkillParams) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, getHabitsByUserAndSkill, arg.UserID, arg.SkillID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.HabitID,
			&i.Title,
			&i.MaxConsecutiveDays,
			&i.SkillID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
