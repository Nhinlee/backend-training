// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: hatbit_logs.sql

package db

import (
	"context"
	"time"
)

const createHabitLog = `-- name: CreateHabitLog :one
INSERT INTO habit_logs (
    user_id,
    habit_id,
    created_at
) VALUES (
    $1, $2, $3
) RETURNING user_id, habit_id, created_at
`

type CreateHabitLogParams struct {
	UserID    int64     `json:"user_id"`
	HabitID   int64     `json:"habit_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateHabitLog(ctx context.Context, arg CreateHabitLogParams) (HabitLog, error) {
	row := q.db.QueryRowContext(ctx, createHabitLog, arg.UserID, arg.HabitID, arg.CreatedAt)
	var i HabitLog
	err := row.Scan(&i.UserID, &i.HabitID, &i.CreatedAt)
	return i, err
}

const getHabitLogsByUser = `-- name: GetHabitLogsByUser :many
SELECT user_id, habit_id, created_at FROM habit_logs
WHERE user_id = $1
ORDER BY habit_id
`

func (q *Queries) GetHabitLogsByUser(ctx context.Context, userID int64) ([]HabitLog, error) {
	rows, err := q.db.QueryContext(ctx, getHabitLogsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HabitLog{}
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.UserID, &i.HabitID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestHabitLogByUser = `-- name: GetLatestHabitLogByUser :many
SELECT user_id, habit_id, created_at from habit_logs
WHERE user_id = $1 AND habit_id = $2
ORDER BY created_at DESC
LIMIT 1
`

type GetLatestHabitLogByUserParams struct {
	UserID  int64 `json:"user_id"`
	HabitID int64 `json:"habit_id"`
}

func (q *Queries) GetLatestHabitLogByUser(ctx context.Context, arg GetLatestHabitLogByUserParams) ([]HabitLog, error) {
	rows, err := q.db.QueryContext(ctx, getLatestHabitLogByUser, arg.UserID, arg.HabitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HabitLog{}
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.UserID, &i.HabitID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
