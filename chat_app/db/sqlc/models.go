// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ConversationUserStatus string

const (
	ConversationUserStatusActive   ConversationUserStatus = "active"
	ConversationUserStatusDeactive ConversationUserStatus = "deactive"
)

func (e *ConversationUserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConversationUserStatus(s)
	case string:
		*e = ConversationUserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ConversationUserStatus: %T", src)
	}
	return nil
}

type NullConversationUserStatus struct {
	ConversationUserStatus ConversationUserStatus
	Valid                  bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConversationUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ConversationUserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConversationUserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConversationUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ConversationUserStatus, nil
}

type Conversation struct {
	ConversationID   string         `json:"conversation_id"`
	ConversationName sql.NullString `json:"conversation_name"`
	CreatedAt        time.Time      `json:"created_at"`
}

type ConversationUser struct {
	UserID         string                     `json:"user_id"`
	ConversationID string                     `json:"conversation_id"`
	Status         NullConversationUserStatus `json:"status"`
	CreatedAt      time.Time                  `json:"created_at"`
}

type User struct {
	UserID            string    `json:"user_id"`
	FirstName         string    `json:"first_name"`
	LastName          string    `json:"last_name"`
	Email             string    `json:"email"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
}
