// Code generated by MockGen. DO NOT EDIT.
// Source: habits.com/habit/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "habits.com/habit/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateHabit mocks base method.
func (m *MockStore) CreateHabit(arg0 context.Context, arg1 db.CreateHabitParams) (db.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabit", arg0, arg1)
	ret0, _ := ret[0].(db.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabit indicates an expected call of CreateHabit.
func (mr *MockStoreMockRecorder) CreateHabit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabit", reflect.TypeOf((*MockStore)(nil).CreateHabit), arg0, arg1)
}

// CreateHabitAndSkill mocks base method.
func (m *MockStore) CreateHabitAndSkill(arg0 context.Context, arg1 db.CreateHabitAndSkillTxParams) (db.CreateHabitAndSkillResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabitAndSkill", arg0, arg1)
	ret0, _ := ret[0].(db.CreateHabitAndSkillResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabitAndSkill indicates an expected call of CreateHabitAndSkill.
func (mr *MockStoreMockRecorder) CreateHabitAndSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabitAndSkill", reflect.TypeOf((*MockStore)(nil).CreateHabitAndSkill), arg0, arg1)
}

// CreateHabitLog mocks base method.
func (m *MockStore) CreateHabitLog(arg0 context.Context, arg1 db.CreateHabitLogParams) (db.HabitLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabitLog", arg0, arg1)
	ret0, _ := ret[0].(db.HabitLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabitLog indicates an expected call of CreateHabitLog.
func (mr *MockStoreMockRecorder) CreateHabitLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabitLog", reflect.TypeOf((*MockStore)(nil).CreateHabitLog), arg0, arg1)
}

// CreateHabitLogTx mocks base method.
func (m *MockStore) CreateHabitLogTx(arg0 context.Context, arg1 db.CreateHabitLogTxParams) (db.CreateHabitLogTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabitLogTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateHabitLogTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabitLogTx indicates an expected call of CreateHabitLogTx.
func (mr *MockStoreMockRecorder) CreateHabitLogTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabitLogTx", reflect.TypeOf((*MockStore)(nil).CreateHabitLogTx), arg0, arg1)
}

// CreateSkill mocks base method.
func (m *MockStore) CreateSkill(arg0 context.Context, arg1 db.CreateSkillParams) (db.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkill", arg0, arg1)
	ret0, _ := ret[0].(db.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSkill indicates an expected call of CreateSkill.
func (mr *MockStoreMockRecorder) CreateSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkill", reflect.TypeOf((*MockStore)(nil).CreateSkill), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteHabit mocks base method.
func (m *MockStore) DeleteHabit(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHabit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHabit indicates an expected call of DeleteHabit.
func (mr *MockStoreMockRecorder) DeleteHabit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHabit", reflect.TypeOf((*MockStore)(nil).DeleteHabit), arg0, arg1)
}

// DeleteSkill mocks base method.
func (m *MockStore) DeleteSkill(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkill indicates an expected call of DeleteSkill.
func (mr *MockStoreMockRecorder) DeleteSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkill", reflect.TypeOf((*MockStore)(nil).DeleteSkill), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetHabitLogsByUser mocks base method.
func (m *MockStore) GetHabitLogsByUser(arg0 context.Context, arg1 int64) ([]db.HabitLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHabitLogsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.HabitLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHabitLogsByUser indicates an expected call of GetHabitLogsByUser.
func (mr *MockStoreMockRecorder) GetHabitLogsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHabitLogsByUser", reflect.TypeOf((*MockStore)(nil).GetHabitLogsByUser), arg0, arg1)
}

// GetHabitsByUser mocks base method.
func (m *MockStore) GetHabitsByUser(arg0 context.Context, arg1 int64) ([]db.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHabitsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHabitsByUser indicates an expected call of GetHabitsByUser.
func (mr *MockStoreMockRecorder) GetHabitsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHabitsByUser", reflect.TypeOf((*MockStore)(nil).GetHabitsByUser), arg0, arg1)
}

// GetHabitsByUserAndSkill mocks base method.
func (m *MockStore) GetHabitsByUserAndSkill(arg0 context.Context, arg1 db.GetHabitsByUserAndSkillParams) ([]db.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHabitsByUserAndSkill", arg0, arg1)
	ret0, _ := ret[0].([]db.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHabitsByUserAndSkill indicates an expected call of GetHabitsByUserAndSkill.
func (mr *MockStoreMockRecorder) GetHabitsByUserAndSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHabitsByUserAndSkill", reflect.TypeOf((*MockStore)(nil).GetHabitsByUserAndSkill), arg0, arg1)
}

// GetLatestHabitLogByUser mocks base method.
func (m *MockStore) GetLatestHabitLogByUser(arg0 context.Context, arg1 db.GetLatestHabitLogByUserParams) ([]db.HabitLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestHabitLogByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.HabitLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHabitLogByUser indicates an expected call of GetLatestHabitLogByUser.
func (mr *MockStoreMockRecorder) GetLatestHabitLogByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHabitLogByUser", reflect.TypeOf((*MockStore)(nil).GetLatestHabitLogByUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListSkillsByUser mocks base method.
func (m *MockStore) ListSkillsByUser(arg0 context.Context, arg1 db.ListSkillsByUserParams) ([]db.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkillsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkillsByUser indicates an expected call of ListSkillsByUser.
func (mr *MockStoreMockRecorder) ListSkillsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkillsByUser", reflect.TypeOf((*MockStore)(nil).ListSkillsByUser), arg0, arg1)
}

// UpdateSkill mocks base method.
func (m *MockStore) UpdateSkill(arg0 context.Context, arg1 db.UpdateSkillParams) (db.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkill", arg0, arg1)
	ret0, _ := ret[0].(db.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkill indicates an expected call of UpdateSkill.
func (mr *MockStoreMockRecorder) UpdateSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkill", reflect.TypeOf((*MockStore)(nil).UpdateSkill), arg0, arg1)
}

// UpdateUserInfo mocks base method.
func (m *MockStore) UpdateUserInfo(arg0 context.Context, arg1 db.UpdateUserInfoParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockStoreMockRecorder) UpdateUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockStore)(nil).UpdateUserInfo), arg0, arg1)
}
