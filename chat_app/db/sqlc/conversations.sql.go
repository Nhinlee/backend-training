// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: conversations.sql

package db

import (
	"context"
	"database/sql"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (
    conversation_id,
    conversation_name
) VALUES (
    $1, $2
) RETURNING conversation_id, conversation_name, created_at
`

type CreateConversationParams struct {
	ConversationID   string         `json:"conversation_id"`
	ConversationName sql.NullString `json:"conversation_name"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.ConversationID, arg.ConversationName)
	var i Conversation
	err := row.Scan(&i.ConversationID, &i.ConversationName, &i.CreatedAt)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations WHERE conversation_id = $1
`

func (q *Queries) DeleteConversation(ctx context.Context, conversationID string) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, conversationID)
	return err
}

const getConversationById = `-- name: GetConversationById :one
SELECT conversation_id, conversation_name, created_at FROM conversations
WHERE conversation_id = $1 LIMIT 1
`

func (q *Queries) GetConversationById(ctx context.Context, conversationID string) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationById, conversationID)
	var i Conversation
	err := row.Scan(&i.ConversationID, &i.ConversationName, &i.CreatedAt)
	return i, err
}

const updateConversationInfo = `-- name: UpdateConversationInfo :one
UPDATE conversations SET conversation_name = $2
WHERE conversation_id = $1
RETURNING conversation_id, conversation_name, created_at
`

type UpdateConversationInfoParams struct {
	ConversationID   string         `json:"conversation_id"`
	ConversationName sql.NullString `json:"conversation_name"`
}

func (q *Queries) UpdateConversationInfo(ctx context.Context, arg UpdateConversationInfoParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, updateConversationInfo, arg.ConversationID, arg.ConversationName)
	var i Conversation
	err := row.Scan(&i.ConversationID, &i.ConversationName, &i.CreatedAt)
	return i, err
}
