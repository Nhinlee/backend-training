// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: skills.sql

package db

import (
	"context"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (
    user_id,
    title
) VALUES (
    $1, $2
) RETURNING skill_id, user_id, title
`

type CreateSkillParams struct {
	UserID int64  `json:"user_id"`
	Title  string `json:"title"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill, arg.UserID, arg.Title)
	var i Skill
	err := row.Scan(&i.SkillID, &i.UserID, &i.Title)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skills WHERE skill_id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, skillID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSkill, skillID)
	return err
}

const listSkillsByUser = `-- name: ListSkillsByUser :many
SELECT skill_id, user_id, title FROM skills
WHERE user_id = $1
LIMIT $2
OFFSET $3
`

type ListSkillsByUserParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSkillsByUser(ctx context.Context, arg ListSkillsByUserParams) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, listSkillsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.SkillID, &i.UserID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE skills SET title = $2
WHERE skill_id = $1
RETURNING skill_id, user_id, title
`

type UpdateSkillParams struct {
	SkillID int64  `json:"skill_id"`
	Title   string `json:"title"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, updateSkill, arg.SkillID, arg.Title)
	var i Skill
	err := row.Scan(&i.SkillID, &i.UserID, &i.Title)
	return i, err
}
